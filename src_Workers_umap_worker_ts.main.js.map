{"version":3,"file":"src_Workers_umap_worker_ts.main.js","sources":["./src/Layouts/ForceUtil.ts","./src/Layouts/Globals.ts","./src/Util.ts","./src/Workers/umap.worker.ts"],"sourcesContent":["import { ScaleLinear, scaleLinear } from 'd3-scale';\nimport { IRectangle } from '../WebGL/Math/Rectangle';\nimport { Simulation, SimulationLinkDatum } from 'd3-force';\nimport { POINT_RADIUS } from './Globals';\n\nexport function scaleToWorld(\n  area: IRectangle\n): [\n  ScaleLinear<number, number>,\n  ScaleLinear<number, number>,\n] {\n  const worldX = scaleLinear()\n    .domain([0, 1])\n    .range([area.x, area.x + area.width]);\n\n  const worldY = scaleLinear()\n    .domain([0, 1])\n    .range([area.y, area.y + area.height]);\n\n  return [worldX, worldY];\n}\n\nexport function forceNormalizationNew(\n  area: IRectangle\n): [\n  ScaleLinear<number, number>,\n  ScaleLinear<number, number>,\n  ScaleLinear<number, number>,\n  ScaleLinear<number, number>,\n  number\n] {\n  const factor = 500 / area.width;\n\n  const scaleX = scaleLinear()\n    .domain([0, 1])\n    .range([0, area.width * factor]);\n\n  const scaleY = scaleLinear()\n    .domain([0, 1])\n    .range([0, area.height * factor]);\n\n  const worldX = scaleLinear()\n    .domain([0, 1])\n    .range([area.x + area.width * 0.01, area.x + area.width * 0.99]);\n\n  const worldY = scaleLinear()\n    .domain([0, 1])\n    .range([area.y + area.height * 0.01, area.y + area.height * 0.99]);\n\n  return [scaleX, scaleY, worldX, worldY, POINT_RADIUS * factor];\n}\n\nexport function forceNormalization(\n  area: IRectangle\n): [ScaleLinear<number, number>, ScaleLinear<number, number>, number] {\n  const factor = 500 / area.width;\n\n  const scaleX = scaleLinear()\n    .domain([area.x, area.x + area.width])\n    .range([0, area.width * factor]);\n\n  const scaleY = scaleLinear()\n    .domain([area.y, area.y + area.height])\n    .range([0, area.height * factor]);\n\n  return [scaleX, scaleY, POINT_RADIUS * factor];\n}\n\nexport function convergeLayout<A, B extends SimulationLinkDatum<A>>(\n  simulation: Simulation<A, B>\n) {\n  for (\n    var i = 0,\n      n = Math.ceil(\n        Math.log(simulation.alphaMin()) / Math.log(1 - simulation.alphaDecay())\n      );\n    i < n;\n    ++i\n  ) {\n    // console.log(\"TICK\")\n    simulation.tick();\n  }\n}\n","export const POINT_RADIUS = 0.012;\n","import { EntityId } from '@reduxjs/toolkit';\nimport { Boundaries, VectorLike } from './Interfaces';\nimport { ScaleLinear, scaleLinear } from 'd3-scale';\nimport { Rectangle } from './WebGL/Math/Rectangle';\n\nexport function isEntityId(value): value is EntityId {\n  return typeof value === 'string' || typeof value === 'number';\n}\n\nexport function getMinMax(values: number[]) {\n  let minX = Number.MAX_SAFE_INTEGER;\n  let maxX = Number.MIN_SAFE_INTEGER;\n\n  values.forEach((sample) => {\n    minX = Math.min(minX, sample);\n    maxX = Math.max(maxX, sample);\n  });\n\n  return [minX, maxX];\n}\n\nexport function getBounds(spatial: VectorLike[]): Boundaries {\n  // Get rectangle that fits around data set\n  let minX = 1000;\n  let maxX = -1000;\n  let minY = 1000;\n  let maxY = -1000;\n\n  spatial.forEach((sample) => {\n    minX = Math.min(minX, sample.x);\n    maxX = Math.max(maxX, sample.x);\n    minY = Math.min(minY, sample.y);\n    maxY = Math.max(maxY, sample.y);\n  });\n\n  return {\n    minX,\n    maxX,\n    minY,\n    maxY,\n    centerX: (minX + maxX) / 2,\n    centerY: (minY + maxY) / 2,\n    extentX: maxX - minX,\n    extentY: maxY - minY,\n  };\n}\n\nexport function spread(center: number, radius: number) {\n  return center - radius + Math.random() * 2 * radius;\n}\n\nexport function scaleInto(source: VectorLike[]): [VectorLike[], number] {\n  const bounds = getBounds(source);\n  const center = 10;\n\n  if (bounds.extentX >= bounds.extentY) {\n    const translateX = center - bounds.centerX;\n    const xScale = scaleLinear().domain([bounds.minX, bounds.maxX]).range([bounds.minX + translateX, bounds.maxX + translateX])\n    const yScale = scaleLinear().domain([bounds.minY, bounds.maxY]).range([center - bounds.extentY / 2, center + bounds.extentY / 2])\n\n    return [source.map((value) => ({\n      x: xScale(value.x),\n      y: yScale(value.y)\n    })), bounds.extentX];\n  }\n\n  if (bounds.extentX < bounds.extentY) {\n    const translateY = center - bounds.centerY;\n    const xScale = scaleLinear().domain([bounds.minX, bounds.maxX]).range([center - bounds.extentX / 2, center + bounds.extentX / 2])\n    const yScale = scaleLinear().domain([bounds.minY, bounds.maxY]).range([bounds.minY + translateY, bounds.maxY + translateY])\n\n    return [source.map((value) => ({\n      x: xScale(value.x),\n      y: yScale(value.y)\n    })), bounds.extentY];\n  }\n}\n\nexport function normalizeVectors(positions: VectorLike[]) {\n  const bounds = getBounds(positions);\n\n  let xScale: ScaleLinear<number, number>;\n  let yScale: ScaleLinear<number, number>;\n\n\n\n  if (bounds.extentX >= bounds.extentY) {\n    const scale = bounds.extentY / bounds.extentX;\n    xScale = scaleLinear().domain([bounds.minX, bounds.maxX]).range([-bounds.extentX / 2, bounds.extentX / 2]);\n    yScale = scaleLinear()\n      .domain([bounds.minY, bounds.maxY])\n      .range([(-bounds.extentY / 2) * scale, (bounds.extentY / 2) * scale]);\n  } else {\n    const scale = bounds.extentX / bounds.extentY;\n    xScale = scaleLinear()\n      .domain([bounds.minX, bounds.maxX])\n      .range([(-bounds.extentX / 2) * scale, (bounds.extentX / 2) * scale]);\n    yScale = scaleLinear().domain([bounds.minY, bounds.maxY]).range([-bounds.extentY / 2, bounds.extentY / 2]);\n  }\n\n  return positions.map((value) => ({ x: xScale(value.x), y: yScale(value.y) }));\n}\n\nexport function normalizeVectors01(positions: VectorLike[]) {\n  const bounds = getBounds(positions);\n\n  let xScale: ScaleLinear<number, number>;\n  let yScale: ScaleLinear<number, number>;\n\n  if (bounds.extentX >= bounds.extentY) {\n    const scale = bounds.extentY / bounds.extentX;\n    xScale = scaleLinear().domain([bounds.minX, bounds.maxX]).range([0, 1]);\n    yScale = scaleLinear()\n      .domain([bounds.minY, bounds.maxY])\n      .range([1 - scale, scale]);\n  } else {\n    const scale = bounds.extentX / bounds.extentY;\n    xScale = scaleLinear()\n      .domain([bounds.minX, bounds.maxX])\n      .range([1 - scale, scale]);\n    yScale = scaleLinear().domain([bounds.minY, bounds.maxY]).range([0, 1]);\n  }\n\n  return positions.map((value) => ({ x: xScale(value.x), y: yScale(value.y) }));\n}\n\n/**\n * Performs a test if a point is inside a polygon based on the idea from\n * https://wrf.ecse.rpi.edu/Research/Short_Notes/pnpoly.html\n *\n * This method will not need the same start/end point since it wraps around the edges of the array\n *\n * @param {*} test a point to test against\n * @param {*} polygon a polygon in the form [[x,y], [x,y], ...]\n * @returns true if the point lies inside the polygon, false otherwise\n */\nexport function pointInPolygon(testx, testy, polygon) {\n  let intersections = 0;\n\n  for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i, i += 1) {\n    const [prevX, prevY] = polygon[j];\n    const [x, y] = polygon[i];\n\n    // count intersections\n    if (\n      y > testy != prevY > testy &&\n      testx < ((prevX - x) * (testy - y)) / (prevY - y) + x\n    ) {\n      intersections += 1;\n    }\n  }\n\n  // point is in polygon if intersection count is odd\n  return intersections & 1;\n}\n","/* eslint-disable no-restricted-globals */\nimport { UMAP } from 'umap-js';\nimport { scaleLinear } from 'd3-scale';\nimport { getMinMax, normalizeVectors01 } from '../Util';\nimport { VectorLike } from '../Interfaces';\nimport {\n  scaleToWorld,\n} from '../Layouts/ForceUtil';\nimport { LabelContainer } from '../Store/interfaces';\n\ninterface UMAPWorkerProps {\n  data: {\n    X;\n    D;\n    N;\n    area;\n    type;\n    Y_in: VectorLike[];\n    axis: 'x' | 'y' | 'xy';\n  };\n}\n\nself.onmessage = ({\n  data: { X, D, N, area, type, Y_in, axis },\n}: UMAPWorkerProps) => {\n  if (type !== 'init') {\n    return;\n  }\n\n  const nComponents = axis === 'xy' ? 2 : 1;\n\n  self.postMessage({\n    type: 'message',\n    message: 'Calculating embedding ...',\n  });\n\n  const umap = new UMAP({\n    nComponents,\n    nEpochs: 200,\n    nNeighbors: 15,\n  });\n  const embedding = umap.fit(X);\n\n  let Y: VectorLike[];\n  const labels: LabelContainer[] = [];\n\n  if (axis === 'x') {\n    const data = embedding.map((arr) => arr[0]);\n    const scale = scaleLinear().domain(getMinMax(data)).range([0, 1]);\n    Y = data.map((arr, i) => ({ x: scale(arr), y: Y_in[i].y }));\n\n    labels.push({\n      discriminator: 'positionedlabels',\n      type: 'x',\n      labels: [{ position: 0.5, content: 'umap-x' }],\n    })\n  } else if (axis === 'y') {\n    const data = embedding.map((arr) => arr[0]);\n    const scale = scaleLinear().domain(getMinMax(data)).range([0, 1]);\n    Y = data.map((arr, i) => ({ y: scale(arr), x: Y_in[i].x }));\n\n    labels.push({\n      discriminator: 'positionedlabels',\n      type: 'y',\n      labels: [{ position: 0.5, content: 'umap-y' }],\n    })\n  } else if (axis === 'xy') {\n    Y = embedding.map((arr) => ({ x: arr[0], y: arr[1] }));\n    Y = normalizeVectors01(Y);\n\n    labels.push({\n      discriminator: 'positionedlabels',\n      type: 'x',\n      labels: [{ position: 0.5, content: 'umap-x' }],\n    })\n    labels.push({\n      discriminator: 'positionedlabels',\n      type: 'y',\n      labels: [{ position: 0.5, content: 'umap-y' }],\n    })\n  }\n\n  const [worldX, worldY] = scaleToWorld(area);\n\n  self.postMessage({\n    type: 'message',\n    message: 'Force layout ...',\n  });\n\n  console.log(Y);\n\n  self.postMessage({\n    type: 'finish',\n    Y: Y.map((node) => ({\n      x: axis !== 'y' ? worldX(node.x) : node.x,\n      y: axis !== 'x' ? worldY(node.y) : node.y,\n    })),\n    labels,\n  });\n};\n"],"names":["scaleToWorld","area","worldX","scaleLinear","domain","range","x","width","worldY","y","height","forceNormalizationNew","factor","scaleX","scaleY","POINT_RADIUS","getMinMax","values","minX","Number","MAX_SAFE_INTEGER","maxX","MIN_SAFE_INTEGER","forEach","sample","Math","min","max","getBounds","spatial","minY","maxY","centerX","centerY","extentX","extentY","spread","center","radius","random","scaleInto","source","bounds","translateX","xScale","yScale","map","value","translateY","normalizeVectors01","positions","scale","pointInPolygon","testx","testy","polygon","intersections","i","j","length","prevX","prevY","self","onmessage","data","X","D","N","type","Y_in","axis","Y","postMessage","message","umap","UMAP","nComponents","nEpochs","nNeighbors","embedding","fit","labels","arr","push","discriminator","position","content","console","log","node"],"mappings":"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"}