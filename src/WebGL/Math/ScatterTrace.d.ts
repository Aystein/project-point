import * as THREE from 'three';
import { Boundaries } from '../../Interfaces';
export declare class ScatterTrace {
    n: number;
    scene: THREE.Scene;
    camera: THREE.OrthographicCamera;
    geometry: THREE.BufferGeometry;
    material: THREE.ShaderMaterial;
    sizeAttribute: THREE.Float32BufferAttribute;
    colorAttribute: THREE.Float32BufferAttribute;
    selectedAttribute: THREE.Float32BufferAttribute;
    opacityAttribute: THREE.Float32BufferAttribute;
    typeAttribute: THREE.Float32BufferAttribute;
    showAttribute: THREE.Float32BufferAttribute;
    positionAttribute: THREE.Float32BufferAttribute;
    position2Attribute: THREE.Float32BufferAttribute;
    hover: number;
    bounds: Boundaries;
    dirty: boolean;
    interpolationTimer: number;
    onDirty: () => void;
    createFakeTexture(): void;
    markAsDirty(): void;
    constructor(n: number);
    initInterpolation(): void;
    updateBounds(xdomain: number[], ydomain: number[], zoom: {
        tx: number;
        ty: number;
        s: number;
    }, width: number, height: number, bounds: Boundaries): void;
    setHover(index: number): void;
    setX(value: number | number[]): void;
    setZ(value: number | number[]): void;
    setY(value: number | number[]): void;
    invalidateOldFrame(): void;
    setSize(value: number | number[]): void;
    setOpacity(value: number | number[]): void;
    setMark(value: number | number[]): void;
    setFilter(value: number | number[]): void;
    setSelected(value: number | number[]): void;
    setColor(value: THREE.ColorRepresentation | THREE.ColorRepresentation[]): void;
    initialize({ x, y, bounds, color, size, opacity, mark, filter, selected, }: {
        selected?: number[] | number;
        filter?: number[] | number;
        x: number[];
        y: number[];
        bounds: Boundaries;
        color?: string[];
        size?: number[];
        opacity?: number[];
        mark?: number[];
    }): void;
    render(renderer: THREE.WebGLRenderer, width: number, height: number): void;
}
