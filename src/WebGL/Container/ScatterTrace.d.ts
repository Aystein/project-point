import * as THREE from "three";
import { Boundaries } from "../../Interfaces";
import { Trace } from "./Trace";
export declare class ScatterTrace extends Trace {
    n: number;
    scene: THREE.Scene;
    camera: THREE.OrthographicCamera;
    geometry: THREE.BufferGeometry;
    material: THREE.ShaderMaterial;
    sizeAttribute: THREE.Float32BufferAttribute;
    colorAttribute: THREE.Float32BufferAttribute;
    selectedAttribute: THREE.Float32BufferAttribute;
    opacityAttribute: THREE.Float32BufferAttribute;
    typeAttribute: THREE.Float32BufferAttribute;
    showAttribute: THREE.Float32BufferAttribute;
    positionAttribute: THREE.Float32BufferAttribute;
    hover: number;
    bounds: Boundaries;
    createFakeTexture(): void;
    constructor(n: number);
    setInterpolation(value: number): void;
    updateBounds(xdomain: number[], ydomain: number[]): void;
    setHover(index: number): void;
    setX(value: number | number[]): void;
    setY(value: number | number[]): void;
    setSize(value: number | number[]): void;
    setOpacity(value: number | number[]): void;
    setMark(value: number | number[]): void;
    setFilter(value: number | number[]): void;
    setSelected(value: number | number[]): void;
    setColor(value: THREE.ColorRepresentation | THREE.ColorRepresentation[]): void;
    initialize({ x, y, bounds, color, size, opacity, mark, filter, selected }: {
        selected?: number[] | number;
        filter?: number[] | number;
        x: number[];
        y: number[];
        bounds: Boundaries;
        color?: string[];
        size?: number[];
        opacity?: number[];
        mark?: number[];
    }): void;
    search(quadtree: any, xmin: any, ymin: any, xmax: any, ymax: any): any[];
    createQuadtree(): void;
    render(renderer: THREE.WebGLRenderer, width: number, height: number): void;
}
