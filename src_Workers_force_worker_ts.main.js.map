{"version":3,"file":"src_Workers_force_worker_ts.main.js","sources":["./src/Layouts/ForceUtil.ts","./src/Layouts/Globals.ts","./src/Workers/force.worker.ts"],"sourcesContent":["import { ScaleLinear, scaleLinear } from 'd3-scale';\r\nimport { IRectangle } from '../WebGL/Math/Rectangle';\r\nimport { Simulation, SimulationLinkDatum } from 'd3-force';\r\nimport { POINT_RADIUS } from './Globals';\r\n\r\nexport function scaleToWorld(\r\n  area: IRectangle\r\n): [\r\n  ScaleLinear<number, number>,\r\n  ScaleLinear<number, number>,\r\n] {\r\n  const worldX = scaleLinear()\r\n    .domain([0, 1])\r\n    .range([area.x, area.x + area.width]);\r\n\r\n  const worldY = scaleLinear()\r\n    .domain([0, 1])\r\n    .range([area.y, area.y + area.height]);\r\n\r\n  return [worldX, worldY];\r\n}\r\n\r\nexport function forceNormalizationNew(\r\n  area: IRectangle\r\n): [\r\n  ScaleLinear<number, number>,\r\n  ScaleLinear<number, number>,\r\n  ScaleLinear<number, number>,\r\n  ScaleLinear<number, number>,\r\n  number\r\n] {\r\n  const factor = 500 / area.width;\r\n\r\n  const scaleX = scaleLinear()\r\n    .domain([0, 1])\r\n    .range([0, area.width * factor]);\r\n\r\n  const scaleY = scaleLinear()\r\n    .domain([0, 1])\r\n    .range([0, area.height * factor]);\r\n\r\n  const worldX = scaleLinear()\r\n    .domain([0, 1])\r\n    .range([area.x + area.width * 0.01, area.x + area.width * 0.99]);\r\n\r\n  const worldY = scaleLinear()\r\n    .domain([0, 1])\r\n    .range([area.y + area.height * 0.01, area.y + area.height * 0.99]);\r\n\r\n  return [scaleX, scaleY, worldX, worldY, POINT_RADIUS * factor];\r\n}\r\n\r\nexport function forceNormalization(\r\n  area: IRectangle\r\n): [ScaleLinear<number, number>, ScaleLinear<number, number>, number] {\r\n  const factor = 500 / area.width;\r\n\r\n  const scaleX = scaleLinear()\r\n    .domain([area.x, area.x + area.width])\r\n    .range([0, area.width * factor]);\r\n\r\n  const scaleY = scaleLinear()\r\n    .domain([area.y, area.y + area.height])\r\n    .range([0, area.height * factor]);\r\n\r\n  return [scaleX, scaleY, POINT_RADIUS * factor];\r\n}\r\n\r\nexport function convergeLayout<A, B extends SimulationLinkDatum<A>>(\r\n  simulation: Simulation<A, B>\r\n) {\r\n  for (\r\n    var i = 0,\r\n      n = Math.ceil(\r\n        Math.log(simulation.alphaMin()) / Math.log(1 - simulation.alphaDecay())\r\n      );\r\n    i < n;\r\n    ++i\r\n  ) {\r\n    // console.log(\"TICK\")\r\n    simulation.tick();\r\n  }\r\n}\r\n","export const POINT_RADIUS = 0.012;\r\n","import { VectorLike } from '../Interfaces';\r\nimport * as d3 from 'd3-force';\r\nimport { convergeLayout, forceNormalizationNew, scaleToWorld } from '../Layouts/ForceUtil';\r\n\r\n/* eslint-disable no-restricted-globals */\r\ninterface UMAPWorkerProps {\r\n  data: {\r\n    area;\r\n    type;\r\n    N;\r\n    axis: 'x' | 'y';\r\n    Y_in: VectorLike[];\r\n    X: number[];\r\n  };\r\n}\r\n\r\nself.onmessage = ({\r\n  data: { area, X, Y_in, type, N, axis },\r\n}: UMAPWorkerProps) => {\r\n  if (type !== 'init') {\r\n    return;\r\n  }\r\n\r\n  const [worldX, worldY] = scaleToWorld(area);\r\n\r\n  self.postMessage({\r\n    type: 'finish',\r\n    Y: Y_in.map((node, i) => ({\r\n      x: axis === 'x' ? worldX(X[i]) : node.x,\r\n      y: axis === 'y' ? worldY(X[i]) : node.y,\r\n    })),\r\n  });\r\n};\r\n"],"names":["scaleToWorld","area","worldX","scaleLinear","domain","range","x","width","worldY","y","height","forceNormalizationNew","factor","scaleX","scaleY","POINT_RADIUS","self","onmessage","data","X","Y_in","type","N","axis","postMessage","Y","map","node","i"],"mappings":"4LAKO,SAASA,EACdC,CAAgB,EAKhB,IAAMC,EAAS,KAAAC,WAAA,IACZC,MAAM,CAAC,CAAC,EAAG,EAAE,EACbC,KAAK,CAAC,CAACJ,EAAKK,CAAC,CAAEL,EAAKK,CAAC,CAAGL,EAAKM,KAAK,CAAC,EAEhCC,EAAS,KAAAL,WAAA,IACZC,MAAM,CAAC,CAAC,EAAG,EAAE,EACbC,KAAK,CAAC,CAACJ,EAAKQ,CAAC,CAAER,EAAKQ,CAAC,CAAGR,EAAKS,MAAM,CAAC,EAEvC,MAAO,CAACR,EAAQM,EAAO,AACzB,CAEO,SAASG,EACdV,CAAgB,EAQhB,IAAMW,EAAS,IAAMX,EAAKM,KAAK,CAEzBM,EAAS,KAAAV,WAAA,IACZC,MAAM,CAAC,CAAC,EAAG,EAAE,EACbC,KAAK,CAAC,CAAC,EAAGJ,EAAKM,KAAK,CAAGK,EAAO,EAE3BE,EAAS,KAAAX,WAAA,IACZC,MAAM,CAAC,CAAC,EAAG,EAAE,EACbC,KAAK,CAAC,CAAC,EAAGJ,EAAKS,MAAM,CAAGE,EAAO,EAE5BV,EAAS,KAAAC,WAAA,IACZC,MAAM,CAAC,CAAC,EAAG,EAAE,EACbC,KAAK,CAAC,CAACJ,EAAKK,CAAC,CAAGL,AAAa,IAAbA,EAAKM,KAAK,CAASN,EAAKK,CAAC,CAAGL,AAAa,IAAbA,EAAKM,KAAK,CAAQ,EAE3DC,EAAS,KAAAL,WAAA,IACZC,MAAM,CAAC,CAAC,EAAG,EAAE,EACbC,KAAK,CAAC,CAACJ,EAAKQ,CAAC,CAAGR,AAAc,IAAdA,EAAKS,MAAM,CAAST,EAAKQ,CAAC,CAAGR,AAAc,IAAdA,EAAKS,MAAM,CAAQ,EAEnE,MAAO,CAACG,EAAQC,EAAQZ,EAAQM,EAAQ,EAAAO,YAAY,CAAGH,EAAO,AAChE,C,uFClDO,IAAMG,EAAe,I,8DCgB5BC,CAAAA,KAAKC,SAAS,CAAG,CAAC,CAChBC,KAAM,CAAEjB,KAAAA,CAAI,CAAEkB,EAAAA,CAAC,CAAEC,KAAAA,CAAI,CAAEC,KAAAA,CAAI,CAAEC,EAAAA,CAAC,CAAEC,KAAAA,CAAI,CAAE,CACtB,IAChB,GAAIF,AAAS,SAATA,EACF,OAGF,GAAM,CAACnB,EAAQM,EAAO,CAAG,KAAAR,YAAA,EAAaC,GAEtCe,KAAKQ,WAAW,CAAC,CACfH,KAAM,SACNI,EAAGL,EAAKM,GAAG,CAAC,CAACC,EAAMC,IAAO,EACxBtB,EAAGiB,AAAS,MAATA,EAAerB,EAAOiB,CAAC,CAACS,EAAE,EAAID,EAAKrB,CAAC,CACvCG,EAAGc,AAAS,MAATA,EAAef,EAAOW,CAAC,CAACS,EAAE,EAAID,EAAKlB,CAAC,AACzC,GACF,EACF,C"}