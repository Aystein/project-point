{"version":3,"file":"src_Workers_spaghetti_worker_ts.main.js","sources":["./src/Layouts/ForceUtil.ts","./src/Layouts/Globals.ts","./src/Util.ts","./src/Workers/spaghetti.worker.ts"],"sourcesContent":["import { ScaleLinear, scaleLinear } from 'd3-scale';\r\nimport { IRectangle } from '../WebGL/Math/Rectangle';\r\nimport { Simulation, SimulationLinkDatum } from 'd3-force';\r\nimport { POINT_RADIUS } from './Globals';\r\n\r\nexport function scaleToWorld(\r\n  area: IRectangle\r\n): [\r\n  ScaleLinear<number, number>,\r\n  ScaleLinear<number, number>,\r\n] {\r\n  const worldX = scaleLinear()\r\n    .domain([0, 1])\r\n    .range([area.x, area.x + area.width]);\r\n\r\n  const worldY = scaleLinear()\r\n    .domain([0, 1])\r\n    .range([area.y, area.y + area.height]);\r\n\r\n  return [worldX, worldY];\r\n}\r\n\r\nexport function forceNormalizationNew(\r\n  area: IRectangle\r\n): [\r\n  ScaleLinear<number, number>,\r\n  ScaleLinear<number, number>,\r\n  ScaleLinear<number, number>,\r\n  ScaleLinear<number, number>,\r\n  number\r\n] {\r\n  const factor = 500 / area.width;\r\n\r\n  const scaleX = scaleLinear()\r\n    .domain([0, 1])\r\n    .range([0, area.width * factor]);\r\n\r\n  const scaleY = scaleLinear()\r\n    .domain([0, 1])\r\n    .range([0, area.height * factor]);\r\n\r\n  const worldX = scaleLinear()\r\n    .domain([0, 1])\r\n    .range([area.x + area.width * 0.01, area.x + area.width * 0.99]);\r\n\r\n  const worldY = scaleLinear()\r\n    .domain([0, 1])\r\n    .range([area.y + area.height * 0.01, area.y + area.height * 0.99]);\r\n\r\n  return [scaleX, scaleY, worldX, worldY, POINT_RADIUS * factor];\r\n}\r\n\r\nexport function forceNormalization(\r\n  area: IRectangle\r\n): [ScaleLinear<number, number>, ScaleLinear<number, number>, number] {\r\n  const factor = 500 / area.width;\r\n\r\n  const scaleX = scaleLinear()\r\n    .domain([area.x, area.x + area.width])\r\n    .range([0, area.width * factor]);\r\n\r\n  const scaleY = scaleLinear()\r\n    .domain([area.y, area.y + area.height])\r\n    .range([0, area.height * factor]);\r\n\r\n  return [scaleX, scaleY, POINT_RADIUS * factor];\r\n}\r\n\r\nexport function convergeLayout<A, B extends SimulationLinkDatum<A>>(\r\n  simulation: Simulation<A, B>\r\n) {\r\n  for (\r\n    var i = 0,\r\n      n = Math.ceil(\r\n        Math.log(simulation.alphaMin()) / Math.log(1 - simulation.alphaDecay())\r\n      );\r\n    i < n;\r\n    ++i\r\n  ) {\r\n    // console.log(\"TICK\")\r\n    simulation.tick();\r\n  }\r\n}\r\n","export const POINT_RADIUS = 0.012;\r\n","import { EntityId } from '@reduxjs/toolkit';\r\nimport { Boundaries, VectorLike } from './Interfaces';\r\nimport { ScaleLinear, scaleLinear } from 'd3-scale';\r\nimport { Rectangle } from './WebGL/Math/Rectangle';\r\n\r\nexport function isEntityId(value): value is EntityId {\r\n  return typeof value === 'string' || typeof value === 'number';\r\n}\r\n\r\nexport function getMinMax(values: number[]) {\r\n  let minX = Number.MAX_SAFE_INTEGER;\r\n  let maxX = Number.MIN_SAFE_INTEGER;\r\n\r\n  values.forEach((sample) => {\r\n    minX = Math.min(minX, sample);\r\n    maxX = Math.max(maxX, sample);\r\n  });\r\n\r\n  return [minX, maxX];\r\n}\r\n\r\nexport function getBounds(spatial: VectorLike[]): Boundaries {\r\n  // Get rectangle that fits around data set\r\n  let minX = 1000;\r\n  let maxX = -1000;\r\n  let minY = 1000;\r\n  let maxY = -1000;\r\n\r\n  spatial.forEach((sample) => {\r\n    minX = Math.min(minX, sample.x);\r\n    maxX = Math.max(maxX, sample.x);\r\n    minY = Math.min(minY, sample.y);\r\n    maxY = Math.max(maxY, sample.y);\r\n  });\r\n\r\n  return {\r\n    minX,\r\n    maxX,\r\n    minY,\r\n    maxY,\r\n    centerX: (minX + maxX) / 2,\r\n    centerY: (minY + maxY) / 2,\r\n    extentX: maxX - minX,\r\n    extentY: maxY - minY,\r\n  };\r\n}\r\n\r\nexport function spread(center: number, radius: number) {\r\n  return center - radius + Math.random() * 2 * radius;\r\n}\r\n\r\nexport function scaleInto(source: VectorLike[]): [VectorLike[], number] {\r\n  const bounds = getBounds(source);\r\n  const center = 10;\r\n\r\n  if (bounds.extentX >= bounds.extentY) {\r\n    const translateX = center - bounds.centerX;\r\n    const xScale = scaleLinear().domain([bounds.minX, bounds.maxX]).range([bounds.minX + translateX, bounds.maxX + translateX])\r\n    const yScale = scaleLinear().domain([bounds.minY, bounds.maxY]).range([center - bounds.extentY / 2, center + bounds.extentY / 2])\r\n\r\n    return [source.map((value) => ({\r\n      x: xScale(value.x),\r\n      y: yScale(value.y)\r\n    })), bounds.extentX];\r\n  }\r\n\r\n  if (bounds.extentX < bounds.extentY) {\r\n    const translateY = center - bounds.centerY;\r\n    const xScale = scaleLinear().domain([bounds.minX, bounds.maxX]).range([center - bounds.extentX / 2, center + bounds.extentX / 2])\r\n    const yScale = scaleLinear().domain([bounds.minY, bounds.maxY]).range([bounds.minY + translateY, bounds.maxY + translateY])\r\n\r\n    return [source.map((value) => ({\r\n      x: xScale(value.x),\r\n      y: yScale(value.y)\r\n    })), bounds.extentY];\r\n  }\r\n}\r\n\r\nexport function normalizeVectors(positions: VectorLike[]) {\r\n  const bounds = getBounds(positions);\r\n\r\n  let xScale: ScaleLinear<number, number>;\r\n  let yScale: ScaleLinear<number, number>;\r\n\r\n\r\n\r\n  if (bounds.extentX >= bounds.extentY) {\r\n    const scale = bounds.extentY / bounds.extentX;\r\n    xScale = scaleLinear().domain([bounds.minX, bounds.maxX]).range([-bounds.extentX / 2, bounds.extentX / 2]);\r\n    yScale = scaleLinear()\r\n      .domain([bounds.minY, bounds.maxY])\r\n      .range([(-bounds.extentY / 2) * scale, (bounds.extentY / 2) * scale]);\r\n  } else {\r\n    const scale = bounds.extentX / bounds.extentY;\r\n    xScale = scaleLinear()\r\n      .domain([bounds.minX, bounds.maxX])\r\n      .range([(-bounds.extentX / 2) * scale, (bounds.extentX / 2) * scale]);\r\n    yScale = scaleLinear().domain([bounds.minY, bounds.maxY]).range([-bounds.extentY / 2, bounds.extentY / 2]);\r\n  }\r\n\r\n  return positions.map((value) => ({ x: xScale(value.x), y: yScale(value.y) }));\r\n}\r\n\r\nexport function normalizeVectors01(positions: VectorLike[]) {\r\n  const bounds = getBounds(positions);\r\n\r\n  let xScale: ScaleLinear<number, number>;\r\n  let yScale: ScaleLinear<number, number>;\r\n\r\n  if (bounds.extentX >= bounds.extentY) {\r\n    const scale = bounds.extentY / bounds.extentX;\r\n    xScale = scaleLinear().domain([bounds.minX, bounds.maxX]).range([0, 1]);\r\n    yScale = scaleLinear()\r\n      .domain([bounds.minY, bounds.maxY])\r\n      .range([1 - scale, scale]);\r\n  } else {\r\n    const scale = bounds.extentX / bounds.extentY;\r\n    xScale = scaleLinear()\r\n      .domain([bounds.minX, bounds.maxX])\r\n      .range([1 - scale, scale]);\r\n    yScale = scaleLinear().domain([bounds.minY, bounds.maxY]).range([0, 1]);\r\n  }\r\n\r\n  return positions.map((value) => ({ x: xScale(value.x), y: yScale(value.y) }));\r\n}\r\n\r\n/**\r\n * Performs a test if a point is inside a polygon based on the idea from\r\n * https://wrf.ecse.rpi.edu/Research/Short_Notes/pnpoly.html\r\n *\r\n * This method will not need the same start/end point since it wraps around the edges of the array\r\n *\r\n * @param {*} test a point to test against\r\n * @param {*} polygon a polygon in the form [[x,y], [x,y], ...]\r\n * @returns true if the point lies inside the polygon, false otherwise\r\n */\r\nexport function pointInPolygon(testx, testy, polygon) {\r\n  let intersections = 0;\r\n\r\n  for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i, i += 1) {\r\n    const [prevX, prevY] = polygon[j];\r\n    const [x, y] = polygon[i];\r\n\r\n    // count intersections\r\n    if (\r\n      y > testy != prevY > testy &&\r\n      testx < ((prevX - x) * (testy - y)) / (prevY - y) + x\r\n    ) {\r\n      intersections += 1;\r\n    }\r\n  }\r\n\r\n  // point is in polygon if intersection count is odd\r\n  return intersections & 1;\r\n}\r\n","/* eslint-disable @typescript-eslint/no-loop-func */\r\n/* eslint-disable no-loop-func */\r\n/* eslint-disable no-restricted-globals */\r\nimport groupBy from 'lodash/groupBy';\r\nimport keys from 'lodash/keys';\r\nimport { VectorLike } from '../Interfaces';\r\nimport {\r\n  forceNormalizationNew,\r\n} from '../Layouts/ForceUtil';\r\nimport { LabelContainer } from '../Store/interfaces';\r\nimport { IRectangle } from '../WebGL/Math/Rectangle';\r\nimport mapValues from 'lodash/mapValues';\r\nimport { nanoid } from '@reduxjs/toolkit';\r\nimport { stratify, treemap, treemapSlice } from 'd3-hierarchy';\r\nimport { POINT_RADIUS } from '../Layouts/Globals';\r\nimport { scaleLinear } from 'd3-scale';\r\nimport { getMinMax } from '../Util';\r\n\r\ninterface Props {\r\n  data: {\r\n    X: { [key: string]: string | number }[];\r\n    area: IRectangle;\r\n    features: string[];\r\n    secondary: string;\r\n    type: string;\r\n    axis: 'x' | 'y';\r\n    Y_in: VectorLike[];\r\n  };\r\n}\r\n\r\nvar nest = function (seq, fns: ((v) => unknown)[]) {\r\n  if (!fns.length)\r\n    return seq;\r\n  var first = fns[0];\r\n  var rest = fns.slice(1);\r\n  return mapValues(groupBy(seq, first), function (value) {\r\n    return nest(value, rest)\r\n  });\r\n};\r\n\r\nfunction position(min: number, max: number, i: number, n: number) {\r\n  const step = (max - min) / n;\r\n\r\n  return {\r\n    min: min + i * step,\r\n    max: min + (i + 1) * step,\r\n  }\r\n}\r\n\r\nself.onmessage = ({\r\n  data: { X, area, type, features, axis, secondary },\r\n}: Props) => {\r\n  if (type !== 'init') {\r\n    return;\r\n  }\r\n\r\n  const labels: LabelContainer = {\r\n    discriminator: 'positionedlabels',\r\n    type: axis,\r\n    labels: [],\r\n  };\r\n\r\n  const relativeIndices = X.map((value, i) => ({\r\n    relativeIndex: i,\r\n    value,\r\n  }));\r\n\r\n  const N = X.length;\r\n  const groups = groupBy(relativeIndices, (value) => {\r\n    return value.value[features[0]];\r\n  });\r\n\r\n  const hierarchy = nest(relativeIndices, features.map((feature) => {\r\n    return (value) => {\r\n      return value.value[feature];\r\n    }\r\n  }))\r\n\r\n  const maxGroupLengths = features.map((feature) => {\r\n    return new Set(X.map((value) => value[feature])).size\r\n  })\r\n  console.log(maxGroupLengths);\r\n\r\n  const Y = new Array<VectorLike>(N);\r\n\r\n  const [scaleX, scaleY, worldX, worldY, radius] = forceNormalizationNew(area);\r\n\r\n  let stepSize = 1 / (keys(groups).length + 1);\r\n  let centerX = stepSize;\r\n\r\n  const maxGroupLength = Math.max(...keys(groups).map((key) => groups[key].length))\r\n\r\n  console.log(hierarchy);\r\n  let totalHeight = 0;\r\n\r\n  const linearScale = scaleLinear().domain(getMinMax(X.map((value) => value[secondary] as number))).range(axis === 'y' ? [area.x, area.x + area.width] : [area.y, area.y + area.height])\r\n\r\n  function traverse(group) {\r\n    const len = keys(group).length;\r\n    let y = 0;\r\n\r\n    keys(group).forEach((value) => {\r\n      const set = group[value];\r\n\r\n      if (Array.isArray(set)) {\r\n        // one line\r\n        console.log(set, len);\r\n        y += POINT_RADIUS * 2;\r\n        set.forEach((item) => {\r\n          const secAxis = linearScale(item.value[secondary]);\r\n          const primary = totalHeight + y;\r\n\r\n          Y[item.relativeIndex] = { x: axis === 'y' ? secAxis : primary, y: axis === 'y' ? primary : secAxis };\r\n        })\r\n      } else {\r\n        // traverse\r\n        traverse(set);\r\n      }\r\n    })\r\n\r\n    totalHeight += y;\r\n    totalHeight += POINT_RADIUS * 5;\r\n  }\r\n\r\n  traverse(hierarchy);\r\n\r\n\r\n  /**for (const key of keys(groups)) {\r\n    const group = groups[key];\r\n\r\n    labels.labels.push({ position: centerX, content: key });\r\n\r\n    group.forEach((item, i) => {\r\n      let secondary = i / maxGroupLength;\r\n      let primary = centerX;\r\n\r\n      if (features.length > 1) {\r\n        // hierarchy[features[0]][features[1]]\r\n      }\r\n\r\n      Y[item.relativeIndex] = { x: axis === 'y' ? secondary : primary, y: axis === 'y' ? primary : secondary };\r\n    });\r\n\r\n    centerX += stepSize;\r\n  }**/ \r\n\r\n  self.postMessage({\r\n    type: 'finish',\r\n    // @ts-ignore\r\n    Y: Y.map((value) => ({ x: value.x, y: axis === 'y' ? area.y + value.y : value.y })),\r\n    labels: [labels],\r\n  });\r\n};\r\n"],"names":["scaleToWorld","area","worldX","scaleLinear","domain","range","x","width","worldY","y","height","forceNormalizationNew","factor","scaleX","scaleY","POINT_RADIUS","getMinMax","values","minX","Number","MAX_SAFE_INTEGER","maxX","MIN_SAFE_INTEGER","forEach","sample","Math","min","max","getBounds","spatial","minY","maxY","centerX","centerY","extentX","extentY","spread","center","radius","random","scaleInto","source","bounds","translateX","xScale","yScale","map","value","translateY","normalizeVectors01","positions","scale","pointInPolygon","testx","testy","polygon","intersections","i","j","length","prevX","prevY","nest","seq","fns","first","rest","slice","self","onmessage","data","X","type","features","axis","secondary","relativeIndices","relativeIndex","N","groups","hierarchy","feature","maxGroupLengths","Set","size","console","log","Y","Array","key","totalHeight","linearScale","traverse","group","len","set","isArray","item","secAxis","primary","postMessage","labels","discriminator"],"mappings":"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"}