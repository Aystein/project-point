{"version":3,"file":"src_Workers_layout_worker_ts.main.js","sources":["./src/Layouts/ForceUtil.ts","./src/Layouts/Globals.ts","./src/Workers/layout.worker.ts"],"sourcesContent":["import { ScaleLinear, scaleLinear } from 'd3-scale';\nimport { IRectangle } from '../WebGL/Math/Rectangle';\nimport { Simulation, SimulationLinkDatum } from 'd3-force';\nimport { POINT_RADIUS } from './Globals';\n\nexport function scaleToWorld(\n  area: IRectangle\n): [\n  ScaleLinear<number, number>,\n  ScaleLinear<number, number>,\n] {\n  const worldX = scaleLinear()\n    .domain([0, 1])\n    .range([area.x, area.x + area.width]);\n\n  const worldY = scaleLinear()\n    .domain([0, 1])\n    .range([area.y, area.y + area.height]);\n\n  return [worldX, worldY];\n}\n\nexport function forceNormalizationNew(\n  area: IRectangle\n): [\n  ScaleLinear<number, number>,\n  ScaleLinear<number, number>,\n  ScaleLinear<number, number>,\n  ScaleLinear<number, number>,\n  number\n] {\n  const factor = 500 / area.width;\n\n  const scaleX = scaleLinear()\n    .domain([0, 1])\n    .range([0, area.width * factor]);\n\n  const scaleY = scaleLinear()\n    .domain([0, 1])\n    .range([0, area.height * factor]);\n\n  const worldX = scaleLinear()\n    .domain([0, 1])\n    .range([area.x + area.width * 0.01, area.x + area.width * 0.99]);\n\n  const worldY = scaleLinear()\n    .domain([0, 1])\n    .range([area.y + area.height * 0.01, area.y + area.height * 0.99]);\n\n  return [scaleX, scaleY, worldX, worldY, POINT_RADIUS * factor];\n}\n\nexport function forceNormalization(\n  area: IRectangle\n): [ScaleLinear<number, number>, ScaleLinear<number, number>, number] {\n  const factor = 500 / area.width;\n\n  const scaleX = scaleLinear()\n    .domain([area.x, area.x + area.width])\n    .range([0, area.width * factor]);\n\n  const scaleY = scaleLinear()\n    .domain([area.y, area.y + area.height])\n    .range([0, area.height * factor]);\n\n  return [scaleX, scaleY, POINT_RADIUS * factor];\n}\n\nexport function convergeLayout<A, B extends SimulationLinkDatum<A>>(\n  simulation: Simulation<A, B>\n) {\n  for (\n    var i = 0,\n      n = Math.ceil(\n        Math.log(simulation.alphaMin()) / Math.log(1 - simulation.alphaDecay())\n      );\n    i < n;\n    ++i\n  ) {\n    // console.log(\"TICK\")\n    simulation.tick();\n  }\n}\n","export const POINT_RADIUS = 0.012;\n","/* eslint-disable no-restricted-globals */\r\nimport { forceNormalizationNew } from \"../Layouts/ForceUtil\";\r\nimport { POINT_RADIUS } from \"../Layouts/Globals\";\r\nimport { IRectangle } from \"../WebGL/Math/Rectangle\";\r\n\r\ntype Commands = 'init' | 'fill_rect'\r\n\r\ninterface Props {\r\n    data: {\r\n        N: number;\r\n        area: IRectangle;\r\n        type: Commands;\r\n        radius?: number;\r\n    };\r\n}\r\n\r\nself.onmessage = ({\r\n    data: { N, area, type, radius = POINT_RADIUS },\r\n}: Props) => {\r\n    /** Generate N points in a rectangle that has the same aspect ratio as the area */\r\n    if (type === 'fill_rect') {\r\n        const c = radius * 3;\r\n        const A = c ** 2 * N;\r\n\r\n        let aspectRatio = area.width / area.height;\r\n\r\n        let h = Math.sqrt(A / aspectRatio);\r\n        let w = A / h;\r\n\r\n        w = Math.ceil(w / c);\r\n        h = Math.ceil(h / c);\r\n\r\n        const offX = area.x + area.width / 2 - (w / 2) * c;\r\n        const offY = area.y + area.height / 2 - (h / 2) * c;\r\n\r\n        const Y = Array.from({ length: N }).map((_, i) => ({ x: (i % w) * c, y: Math.floor(i / w) * c }))\r\n\r\n        const [scaleX, scaleY, worldX, worldY, r] = forceNormalizationNew(area);\r\n\r\n        self.postMessage({\r\n            type: 'finish',\r\n            Y: Y.map((value) => ({ x: offX + value.x, y: offY + value.y })),\r\n        });\r\n    }\r\n\r\n}"],"names":["scaleToWorld","area","worldX","scaleLinear","domain","range","x","width","worldY","y","height","forceNormalizationNew","factor","scaleX","scaleY","POINT_RADIUS","self","onmessage","data","N","type","radius","c","A","h","Math","sqrt","w","ceil","offX","offY","Y","Array","from","length","map","_","i","floor","r","postMessage","value"],"mappings":"4LAKO,SAASA,EACdC,CAAgB,EAKhB,IAAMC,EAAS,KAAAC,WAAA,IACZC,MAAM,CAAC,CAAC,EAAG,EAAE,EACbC,KAAK,CAAC,CAACJ,EAAKK,CAAC,CAAEL,EAAKK,CAAC,CAAGL,EAAKM,KAAK,CAAC,EAEhCC,EAAS,KAAAL,WAAA,IACZC,MAAM,CAAC,CAAC,EAAG,EAAE,EACbC,KAAK,CAAC,CAACJ,EAAKQ,CAAC,CAAER,EAAKQ,CAAC,CAAGR,EAAKS,MAAM,CAAC,EAEvC,MAAO,CAACR,EAAQM,EAAO,AACzB,CAEO,SAASG,EACdV,CAAgB,EAQhB,IAAMW,EAAS,IAAMX,EAAKM,KAAK,CAEzBM,EAAS,KAAAV,WAAA,IACZC,MAAM,CAAC,CAAC,EAAG,EAAE,EACbC,KAAK,CAAC,CAAC,EAAGJ,EAAKM,KAAK,CAAGK,EAAO,EAE3BE,EAAS,KAAAX,WAAA,IACZC,MAAM,CAAC,CAAC,EAAG,EAAE,EACbC,KAAK,CAAC,CAAC,EAAGJ,EAAKS,MAAM,CAAGE,EAAO,EAE5BV,EAAS,KAAAC,WAAA,IACZC,MAAM,CAAC,CAAC,EAAG,EAAE,EACbC,KAAK,CAAC,CAACJ,EAAKK,CAAC,CAAGL,AAAa,IAAbA,EAAKM,KAAK,CAASN,EAAKK,CAAC,CAAGL,AAAa,IAAbA,EAAKM,KAAK,CAAQ,EAE3DC,EAAS,KAAAL,WAAA,IACZC,MAAM,CAAC,CAAC,EAAG,EAAE,EACbC,KAAK,CAAC,CAACJ,EAAKQ,CAAC,CAAGR,AAAc,IAAdA,EAAKS,MAAM,CAAST,EAAKQ,CAAC,CAAGR,AAAc,IAAdA,EAAKS,MAAM,CAAQ,EAEnE,MAAO,CAACG,EAAQC,EAAQZ,EAAQM,EAAQ,EAAAO,YAAY,CAAGH,EAAO,AAChE,C,uFClDO,IAAMG,EAAe,I,0ECgB5BC,CAAAA,KAAKC,SAAS,CAAG,CAAC,CACdC,KAAM,CAAEC,EAAAA,CAAC,CAAElB,KAAAA,CAAI,CAAEmB,KAAAA,CAAI,CAAEC,OAAAA,EAAS,EAAAN,YAAY,CAAE,CAC1C,IAEJ,GAAIK,AAAS,cAATA,EAAsB,CACtB,IAAME,EAAID,AAAS,EAATA,EACJE,EAAID,GAAK,EAAIH,EAIfK,EAAIC,KAAKC,IAAI,CAACH,EAFAtB,CAAAA,EAAKM,KAAK,CAAGN,EAAKS,MAAM,AAAD,GAGrCiB,EAAIJ,EAAIC,EAEZG,EAAIF,KAAKG,IAAI,CAACD,EAAIL,GAClBE,EAAIC,KAAKG,IAAI,CAACJ,EAAIF,GAElB,IAAMO,EAAO5B,EAAKK,CAAC,CAAGL,EAAKM,KAAK,CAAG,EAAKoB,EAAI,EAAKL,EAC3CQ,EAAO7B,EAAKQ,CAAC,CAAGR,EAAKS,MAAM,CAAG,EAAKc,EAAI,EAAKF,EAE5CS,EAAIC,MAAMC,IAAI,CAAC,CAAEC,OAAQf,CAAE,GAAGgB,GAAG,CAAC,CAACC,EAAGC,IAAO,EAAE/B,EAAI+B,EAAIV,EAAKL,EAAGb,EAAGgB,KAAKa,KAAK,CAACD,EAAIV,GAAKL,CAAE,IAExF,CAACT,EAAQC,EAAQZ,EAAQM,EAAQ+B,EAAE,CAAG,KAAA5B,qBAAA,EAAsBV,GAElEe,KAAKwB,WAAW,CAAC,CACbpB,KAAM,SACNW,EAAGA,EAAEI,GAAG,CAAC,AAACM,GAAW,EAAEnC,EAAGuB,EAAOY,EAAMnC,CAAC,CAAEG,EAAGqB,EAAOW,EAAMhC,CAAC,AAAC,GAChE,EACJ,CAEJ,C"}