{"version":3,"file":"src_Workers_group_worker_ts.main.js","sources":["./src/Layouts/Globals.ts","./src/WebGL/Math/Rectangle.ts","./src/Workers/group.worker.ts","./src/Workers/util.ts"],"sourcesContent":["export const POINT_RADIUS = 0.012;\r\n","import { VectorLike } from '../../Interfaces';\r\n\r\nexport interface IRectangle {\r\n  x: number;\r\n  y: number;\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nexport class Rectangle {\r\n  x: number;\r\n\r\n  y: number;\r\n\r\n  width: number;\r\n\r\n  height: number;\r\n\r\n  constructor(x: number, y: number, width: number, height: number) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.width = width;\r\n    this.height = height;\r\n  }\r\n\r\n  within(vector: VectorLike) {\r\n    return (\r\n      vector.x > this.x &&\r\n      vector.x < this.x + this.width &&\r\n      vector.y > this.y &&\r\n      vector.y < this.y + this.height\r\n    );\r\n  }\r\n\r\n  serialize(): IRectangle {\r\n    return {\r\n      x: this.x,\r\n      y: this.y,\r\n      width: this.width,\r\n      height: this.height,\r\n    };\r\n  }\r\n\r\n  percent(xp: number, yp: number) {\r\n    return { x: this.x + this.width * xp,\r\n      y: this.y + this.height * yp }\r\n  }\r\n\r\n  percentX(x: number) {\r\n    return (x - this.x) / this.width\r\n  }\r\n\r\n  percentY(y: number) {\r\n    return (y - this.y) / this.height\r\n  }\r\n\r\n  get centerX() {\r\n    return this.x + this.width / 2;\r\n  }\r\n\r\n  get centerY() {\r\n    return this.y + this.height / 2;\r\n  }\r\n\r\n  static deserialize(dump: IRectangle) {\r\n    return new Rectangle(dump.x, dump.y, dump.width, dump.height);\r\n  }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-loop-func */\r\n/* eslint-disable no-restricted-globals */\r\nimport groupBy from 'lodash/groupBy';\r\nimport keys from 'lodash/keys';\r\nimport { VectorLike } from '../Interfaces';\r\nimport {\r\n  forceNormalizationNew\r\n} from '../Layouts/ForceUtil';\r\nimport { LabelContainer } from '../Store/interfaces';\r\nimport { IRectangle, Rectangle } from '../WebGL/Math/Rectangle';\r\nimport { RatioSquarifyTilingFactory, stratify, treemap, treemapSlice, treemapSquarify } from 'd3-hierarchy';\r\nimport { nanoid } from '@reduxjs/toolkit';\r\nimport { fillRect } from './util';\r\nimport { POINT_RADIUS } from '../Layouts/Globals';\r\nimport { Stream } from 'stream';\r\n\r\ninterface Props {\r\n  data: {\r\n    X: { [key: string]: string | number }[];\r\n    area: IRectangle;\r\n    feature: string;\r\n    type: string;\r\n    strategy: 'slice' | 'treemap';\r\n  };\r\n}\r\n\r\n\r\nself.onmessage = ({\r\n  data: { X, area, type, feature, strategy },\r\n}: Props) => {\r\n  if (type !== 'init') {\r\n    return;\r\n  }\r\n\r\n  const area_rect = Rectangle.deserialize(area);\r\n\r\n  const labels: LabelContainer = {\r\n    discriminator: 'annotations',\r\n    type: 'xy',\r\n    labels: [],\r\n  };\r\n\r\n  self.postMessage({\r\n    type: 'message',\r\n    message: 'Calculating groups',\r\n  });\r\n\r\n  const relativeIndices = X.map((value, i) => ({\r\n    relativeIndex: i,\r\n    value,\r\n  }));\r\n\r\n  const N = X.length;\r\n  const groups = groupBy(relativeIndices, (value) => {\r\n    return value.value[feature];\r\n  });\r\n\r\n  const Y = new Array<VectorLike>(N);\r\n\r\n  const data: { id, parent? }[] = [{ id: 'root' }];\r\n\r\n  for (const key of keys(groups)) {\r\n    data.push({ id: key, parent: 'root' })\r\n\r\n    const group = groups[key];\r\n    group.forEach((item) => {\r\n      data.push({ id: nanoid(), parent: key })\r\n    });\r\n  }\r\n\r\n  let algorithm = strategy === 'slice' ? treemapSlice : treemapSquarify;\r\n  \r\n  const root = stratify<{ id, parent? }>().id((d) => d.id).parentId((d) => d.parent)(data).count();\r\n  const map = treemap().tile(algorithm).paddingTop(POINT_RADIUS * 3).size([area.width, area.height])(root);\r\n\r\n  for (const key of keys(groups)) {\r\n    const group = groups[key];\r\n    const c = map.children.find((child) => child.id === key);\r\n\r\n    const group_area: IRectangle = { x: c.x0 + area.x, y: c.y0 + area.y, width: c.x1 - c.x0, height: c.y1 - c.y0 };\r\n\r\n    const { Y: Y_group, bounds: realBounds } = fillRect(group_area, group.length, POINT_RADIUS)\r\n\r\n    const normalizedW = area_rect.percentY(POINT_RADIUS * 12) - area_rect.percentY(0);\r\n\r\n    labels.labels.push({ position: {\r\n      x: area_rect.percentX(realBounds.x),\r\n      y: area_rect.percentY(realBounds.y) - normalizedW,\r\n      width: area_rect.percentX(realBounds.x + realBounds.width) - area_rect.percentX(realBounds.x),\r\n      height: normalizedW,\r\n    }, content: key })\r\n\r\n    group.forEach((item, i) => {\r\n      Y[item.relativeIndex] = Y_group[i];\r\n    });\r\n  }\r\n\r\n\r\n  self.postMessage({\r\n    type: 'finish',\r\n    // @ts-ignore\r\n    Y,// : Y.map((value) => ({ x: worldX(value.x), y: worldY(value.y) })),\r\n    labels: [labels],\r\n  });\r\n};\r\n","import { POINT_RADIUS } from \"../Layouts/Globals\";\r\nimport { IRectangle, Rectangle } from \"../WebGL/Math/Rectangle\";\r\n\r\nexport function UpdateText(self: Window, value: string) {\r\n  self.postMessage({\r\n    type: 'message',\r\n    message: 'Calculating embedding ...',\r\n  });\r\n}\r\n\r\n\r\n\r\n\r\nexport function fillRect(area: IRectangle, N: number, radius = POINT_RADIUS) {\r\n  if (area.width === 0 || area.height === 0) console.log(area)\r\n\r\n  const c = radius * 3;\r\n  const A = c ** 2 * N;\r\n\r\n  let aspectRatio = area.width / area.height;\r\n\r\n  let h = Math.sqrt(A / aspectRatio);\r\n  let w = A / h;\r\n\r\n  w = Math.ceil(w / c);\r\n  h = Math.ceil(h / c);\r\n\r\n  const offX = area.x + area.width / 2 - (w / 2) * c;\r\n  const offY = area.y + area.height / 2 - (h / 2) * c;\r\n\r\n  const Y = Array.from({ length: N }).map((_, i) => ({ x: (i % w) * c, y: Math.floor(i / w) * c }))\r\n  return { Y: Y.map((value) => ({ x: offX + value.x + c / 2, y: offY + value.y + c / 2 })), bounds: Rectangle.deserialize({ x: offX, y: offY, width: (w) * c, height: (h) * c }) as Rectangle };\r\n}"],"names":["POINT_RADIUS","Rectangle","x","y","width","height","constructor","within","vector","serialize","percent","xp","yp","percentX","percentY","centerX","centerY","deserialize","dump","self","onmessage","data","X","area","type","feature","strategy","area_rect","labels","discriminator","postMessage","message","relativeIndices","map","value","i","relativeIndex","N","length","groups","Y","Array","id","key","push","parent","group","forEach","item","nanoid","algorithm","treemapSlice","treemapSquarify","root","stratify","d","parentId","count","treemap","tile","paddingTop","size","c","children","find","child","group_area","x0","y0","x1","y1","Y_group","bounds","realBounds","fillRect","normalizedW","position","content","radius","console","log","A","h","Math","sqrt","w","ceil","offX","offY","from","_","floor"],"mappings":"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"}