{"version":3,"file":"src_Workers_group_worker_ts.main.js","sources":["./src/Layouts/Globals.ts","./src/WebGL/Math/Rectangle.ts","./src/Workers/group.worker.ts","./src/Workers/util.ts"],"sourcesContent":["export const POINT_RADIUS = 0.012;\n","import { VectorLike } from '../../Interfaces';\n\nexport interface IRectangle {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n}\n\nexport class Rectangle {\n  x: number;\n\n  y: number;\n\n  width: number;\n\n  height: number;\n\n  constructor(x: number, y: number, width: number, height: number) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  within(vector: VectorLike) {\n    return (\n      vector.x > this.x &&\n      vector.x < this.x + this.width &&\n      vector.y > this.y &&\n      vector.y < this.y + this.height\n    );\n  }\n\n  serialize(): IRectangle {\n    return {\n      x: this.x,\n      y: this.y,\n      width: this.width,\n      height: this.height,\n    };\n  }\n\n  percent(xp: number, yp: number) {\n    return { x: this.x + this.width * xp,\n      y: this.y + this.height * yp }\n  }\n\n  percentX(x: number) {\n    return (x - this.x) / this.width\n  }\n\n  percentY(y: number) {\n    return (y - this.y) / this.height\n  }\n\n  get centerX() {\n    return this.x + this.width / 2;\n  }\n\n  get centerY() {\n    return this.y + this.height / 2;\n  }\n\n  static deserialize(dump: IRectangle) {\n    return new Rectangle(dump.x, dump.y, dump.width, dump.height);\n  }\n}\n","/* eslint-disable @typescript-eslint/no-loop-func */\n/* eslint-disable no-restricted-globals */\nimport { nanoid } from '@reduxjs/toolkit';\nimport { stratify, treemap, treemapSlice, treemapSquarify } from 'd3-hierarchy';\nimport groupBy from 'lodash/groupBy';\nimport keys from 'lodash/keys';\nimport { VectorLike } from '../Interfaces';\nimport { POINT_RADIUS } from '../Layouts/Globals';\nimport { LabelContainer } from '../Store/interfaces';\nimport { IRectangle, Rectangle } from '../WebGL/Math/Rectangle';\nimport { fillRect } from './util';\nimport { bin } from 'd3';\nimport { filter, isNumber } from 'lodash';\n\ninterface Props {\n  data: {\n    X: { [key: string]: string | number }[];\n    area: IRectangle;\n    feature: string;\n    type: string;\n    strategy: 'slice' | 'treemap';\n  };\n}\n\nself.onmessage = ({\n  data: { X, area, type, feature, strategy },\n}: Props) => {\n  if (type !== 'init') {\n    return;\n  }\n\n  const area_rect = Rectangle.deserialize(area);\n\n  const labels: LabelContainer = {\n    discriminator: 'annotations',\n    type: 'xy',\n    labels: [],\n  };\n\n  self.postMessage({\n    type: 'message',\n    message: 'Calculating groups',\n  });\n\n  const relativeIndices = X.map((value, i) => ({\n    relativeIndex: i,\n    value,\n  }));\n\n  const valueArray = relativeIndices.map((entry) => entry.value[feature] as number);\n\n  const N = X.length;\n\n  let groups;\n  if (isNumber(valueArray[0])) {\n    const filteredNulls = relativeIndices.filter((ri) => !isNumber(ri.value[feature]))\n    const bins = bin().value((d) => d.value[feature])(relativeIndices);\n    groups = bins.reduce((initial, current) => {\n      initial[`${current.x0} - ${current.x1}`] = current;\n      return initial;\n    }, {});\n    if (filteredNulls.length > 0) {\n      groups['missing'] = filteredNulls;\n    }\n  } else {\n    groups = groupBy(relativeIndices, (value) => {\n      return value.value[feature];\n    });\n  }\n\n\n  const Y = new Array<VectorLike>(N);\n\n  const data: { id, parent?}[] = [{ id: 'root' }];\n\n  for (const key of keys(groups)) {\n    data.push({ id: key, parent: 'root' })\n\n    const group = groups[key];\n    group.forEach((item) => {\n      data.push({ id: nanoid(), parent: key })\n    });\n  }\n\n  let algorithm = strategy === 'slice' ? treemapSlice : treemapSquarify;\n\n  const root = stratify<{ id, parent?}>().id((d) => d.id).parentId((d) => d.parent)(data).count();\n  const map = treemap().tile(algorithm).paddingTop(POINT_RADIUS * 3).size([area.width, area.height])(root);\n\n  for (const key of keys(groups)) {\n    const group = groups[key];\n    const c = map.children.find((child) => child.id === key);\n\n    const group_area: IRectangle = { x: c.x0 + area.x, y: c.y0 + area.y, width: c.x1 - c.x0, height: c.y1 - c.y0 };\n\n    const { Y: Y_group, bounds: realBounds } = fillRect(group_area, group.length, POINT_RADIUS)\n\n    const normalizedW = area_rect.percentY(POINT_RADIUS * 12) - area_rect.percentY(0);\n\n    labels.labels.push({\n      position: {\n        x: area_rect.percentX(realBounds.x),\n        y: area_rect.percentY(realBounds.y) - normalizedW,\n        width: area_rect.percentX(realBounds.x + realBounds.width) - area_rect.percentX(realBounds.x),\n        height: normalizedW,\n      }, content: key\n    })\n\n    group.forEach((item, i) => {\n      Y[item.relativeIndex] = Y_group[i];\n    });\n  }\n\n\n  self.postMessage({\n    type: 'finish',\n    // @ts-ignore\n    Y,// : Y.map((value) => ({ x: worldX(value.x), y: worldY(value.y) })),\n    labels: [labels],\n  });\n};\n","import { POINT_RADIUS } from \"../Layouts/Globals\";\nimport { IRectangle, Rectangle } from \"../WebGL/Math/Rectangle\";\n\nexport function UpdateText(self: Window, value: string) {\n  self.postMessage({\n    type: 'message',\n    message: 'Calculating embedding ...',\n  });\n}\n\n\n\n\nexport function fillRect(area: IRectangle, N: number, radius = POINT_RADIUS) {\n  if (area.width === 0 || area.height === 0) console.log(area)\n\n  const c = radius * 3;\n  const A = c ** 2 * N;\n\n  let aspectRatio = area.width / area.height;\n\n  let h = Math.sqrt(A / aspectRatio);\n  let w = A / h;\n\n  w = Math.ceil(w / c);\n  h = Math.ceil(h / c);\n\n  const offX = area.x + area.width / 2 - (w / 2) * c;\n  const offY = area.y + area.height / 2 - (h / 2) * c;\n\n  const Y = Array.from({ length: N }).map((_, i) => ({ x: (i % w) * c, y: Math.floor(i / w) * c }))\n  return { Y: Y.map((value) => ({ x: offX + value.x + c / 2, y: offY + value.y + c / 2 })), bounds: Rectangle.deserialize({ x: offX, y: offY, width: (w) * c, height: (h) * c }) as Rectangle };\n}"],"names":["POINT_RADIUS","Rectangle","x","y","width","height","constructor","within","vector","serialize","percent","xp","yp","percentX","percentY","centerX","centerY","deserialize","dump","self","onmessage","data","X","area","type","feature","strategy","groups","area_rect","labels","discriminator","postMessage","message","relativeIndices","map","value","i","relativeIndex","valueArray","entry","N","length","isNumber","filteredNulls","filter","ri","bins","bin","d","reduce","initial","current","x0","x1","Y","Array","id","key","push","parent","group","forEach","item","nanoid","algorithm","treemapSlice","treemapSquarify","root","stratify","parentId","count","treemap","tile","paddingTop","size","c","children","find","child","group_area","y0","y1","Y_group","bounds","realBounds","fillRect","normalizedW","position","content","radius","console","log","A","h","Math","sqrt","w","ceil","offX","offY","from","_","floor"],"mappings":"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"}