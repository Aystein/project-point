{"version":3,"file":"src_Workers_group_worker_ts.main.js","sources":["./src/Layouts/ForceUtil.ts","./src/Layouts/Globals.ts","./src/Workers/group.worker.ts","./src/Workers/util.ts"],"sourcesContent":["import { ScaleLinear, scaleLinear } from 'd3-scale';\nimport { IRectangle } from '../WebGL/Math/Rectangle';\nimport { Simulation, SimulationLinkDatum } from 'd3-force';\nimport { POINT_RADIUS } from './Globals';\n\nexport function scaleToWorld(\n  area: IRectangle\n): [\n  ScaleLinear<number, number>,\n  ScaleLinear<number, number>,\n] {\n  const worldX = scaleLinear()\n    .domain([0, 1])\n    .range([area.x, area.x + area.width]);\n\n  const worldY = scaleLinear()\n    .domain([0, 1])\n    .range([area.y, area.y + area.height]);\n\n  return [worldX, worldY];\n}\n\nexport function forceNormalizationNew(\n  area: IRectangle\n): [\n  ScaleLinear<number, number>,\n  ScaleLinear<number, number>,\n  ScaleLinear<number, number>,\n  ScaleLinear<number, number>,\n  number\n] {\n  const factor = 500 / area.width;\n\n  const scaleX = scaleLinear()\n    .domain([0, 1])\n    .range([0, area.width * factor]);\n\n  const scaleY = scaleLinear()\n    .domain([0, 1])\n    .range([0, area.height * factor]);\n\n  const worldX = scaleLinear()\n    .domain([0, 1])\n    .range([area.x + area.width * 0.01, area.x + area.width * 0.99]);\n\n  const worldY = scaleLinear()\n    .domain([0, 1])\n    .range([area.y + area.height * 0.01, area.y + area.height * 0.99]);\n\n  return [scaleX, scaleY, worldX, worldY, POINT_RADIUS * factor];\n}\n\nexport function forceNormalization(\n  area: IRectangle\n): [ScaleLinear<number, number>, ScaleLinear<number, number>, number] {\n  const factor = 500 / area.width;\n\n  const scaleX = scaleLinear()\n    .domain([area.x, area.x + area.width])\n    .range([0, area.width * factor]);\n\n  const scaleY = scaleLinear()\n    .domain([area.y, area.y + area.height])\n    .range([0, area.height * factor]);\n\n  return [scaleX, scaleY, POINT_RADIUS * factor];\n}\n\nexport function convergeLayout<A, B extends SimulationLinkDatum<A>>(\n  simulation: Simulation<A, B>\n) {\n  for (\n    var i = 0,\n      n = Math.ceil(\n        Math.log(simulation.alphaMin()) / Math.log(1 - simulation.alphaDecay())\n      );\n    i < n;\n    ++i\n  ) {\n    // console.log(\"TICK\")\n    simulation.tick();\n  }\n}\n","export const POINT_RADIUS = 0.012;\n","/* eslint-disable @typescript-eslint/no-loop-func */\r\n/* eslint-disable no-restricted-globals */\r\nimport groupBy from 'lodash/groupBy';\r\nimport keys from 'lodash/keys';\r\nimport { VectorLike } from '../Interfaces';\r\nimport {\r\n  forceNormalizationNew\r\n} from '../Layouts/ForceUtil';\r\nimport { LabelContainer } from '../Store/ModelSlice';\r\nimport { IRectangle } from '../WebGL/Math/Rectangle';\r\nimport { stratify, treemap, treemapSquarify } from 'd3-hierarchy';\r\nimport { nanoid } from '@reduxjs/toolkit';\r\nimport { fillRect } from './util';\r\nimport { POINT_RADIUS } from '../Layouts/Globals';\r\n\r\ninterface Props {\r\n  data: {\r\n    X: { [key: string]: string | number }[];\r\n    area: IRectangle;\r\n    feature: string;\r\n    type: string;\r\n    axis: 'x' | 'y';\r\n    xLayout: number[];\r\n    yLayout: number[];\r\n  };\r\n}\r\n\r\n\r\nself.onmessage = ({\r\n  data: { X, area, type, feature, yLayout },\r\n}: Props) => {\r\n  if (type !== 'init') {\r\n    return;\r\n  }\r\n\r\n  const labels: LabelContainer = {\r\n    discriminator: 'positionedlabels',\r\n    type: 'x',\r\n    labels: [],\r\n  };\r\n\r\n  self.postMessage({\r\n    type: 'message',\r\n    message: 'Calculating groups',\r\n  });\r\n\r\n  const relativeIndices = X.map((value, i) => ({\r\n    relativeIndex: i,\r\n    value,\r\n  }));\r\n\r\n  const N = X.length;\r\n  const groups = groupBy(relativeIndices, (value) => {\r\n    return value.value[feature];\r\n  });\r\n\r\n  const Y = new Array<VectorLike>(N);\r\n\r\n  const [scaleX, scaleY, worldX, worldY, radius] = forceNormalizationNew(area);\r\n\r\n  const padding = 1 / (keys(groups).length + 10);\r\n  let usedSpace = padding;\r\n\r\n  let leftSpace = 1 - padding * (keys(groups).length + 1);\r\n\r\n/**   for (const key of keys(groups)) {\r\n    const group = groups[key];\r\n\r\n    const portion = leftSpace * (group.length / N);\r\n    const centerX = usedSpace + portion / 2;\r\n\r\n    labels.labels.push({ position: centerX, content: key });\r\n\r\n    usedSpace += portion + padding;\r\n\r\n    const extent = portion / 3;\r\n\r\n    group.forEach((item, i) => {\r\n      Y[item.relativeIndex] = { x: centerX + (-2 + Math.random()) * extent, y: yLayout[item.relativeIndex] };\r\n    });\r\n  }\r\n**/\r\n  const data: { id, parent? }[] = [{ id: 'root' }];\r\n\r\n  for (const key of keys(groups)) {\r\n    data.push({ id: key, parent: 'root' })\r\n\r\n    const group = groups[key];\r\n    group.forEach((item) => {\r\n      data.push({ id: nanoid(), parent: key })\r\n    });\r\n  }\r\n\r\n  \r\n  const root = stratify<{ id, parent? }>().id((d) => d.id).parentId((d) => d.parent)(data).count();\r\n  const map = treemap().tile(treemapSquarify).padding(POINT_RADIUS * 3).size([area.width, area.height])(root);\r\n  console.log(map);\r\n\r\n  for (const key of keys(groups)) {\r\n    const group = groups[key];\r\n    const c = map.children.find((child) => child.id === key);\r\n    const group_area: IRectangle = { x: c.x0 + area.x, y: c.y0 + area.y, width: c.x1 - c.x0, height: c.y1 - c.y0 };\r\n\r\n    const Y_group = fillRect(group_area, group.length, POINT_RADIUS)\r\n\r\n    group.forEach((item, i) => {\r\n      Y[item.relativeIndex] = Y_group[i];\r\n    });\r\n  }\r\n\r\n\r\n  self.postMessage({\r\n    type: 'finish',\r\n    // @ts-ignore\r\n    Y,// : Y.map((value) => ({ x: worldX(value.x), y: worldY(value.y) })),\r\n    labels: [labels],\r\n  });\r\n};\r\n","import { POINT_RADIUS } from \"../Layouts/Globals\";\nimport { IRectangle } from \"../WebGL/Math/Rectangle\";\n\nexport function UpdateText(self: Window, value: string) {\n  self.postMessage({\n    type: 'message',\n    message: 'Calculating embedding ...',\n  });\n}\n\n\n\n\nexport function fillRect(area: IRectangle, N: number, radius = POINT_RADIUS) {\n  const c = radius * 3;\n  const A = c ** 2 * N;\n\n  let aspectRatio = area.width / area.height;\n\n  let h = Math.sqrt(A / aspectRatio);\n  let w = A / h;\n\n  w = Math.ceil(w / c);\n  h = Math.ceil(h / c);\n\n  const offX = area.x + area.width / 2 - (w / 2) * c;\n  const offY = area.y + area.height / 2 - (h / 2) * c;\n\n  const Y = Array.from({ length: N }).map((_, i) => ({ x: (i % w) * c, y: Math.floor(i / w) * c }))\n  return Y.map((value) => ({ x: offX + value.x, y: offY + value.y }));\n}"],"names":["scaleToWorld","area","worldX","scaleLinear","domain","range","x","width","worldY","y","height","forceNormalizationNew","factor","scaleX","scaleY","POINT_RADIUS","self","onmessage","data","X","type","feature","yLayout","postMessage","message","relativeIndices","map","value","i","relativeIndex","N","length","groups","Y","Array","radius","id","key","push","parent","group","forEach","item","nanoid","root","stratify","d","parentId","count","treemap","tile","treemapSquarify","padding","size","console","log","c","children","find","child","group_area","x0","y0","x1","y1","Y_group","fillRect","labels","discriminator","A","h","Math","sqrt","w","ceil","offX","offY","from","_","floor"],"mappings":"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"}